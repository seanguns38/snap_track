{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport invariant from 'invariant';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { val } from \"../val\";\nimport { adapt, createAnimatedBlock as block } from \"./AnimatedBlock\";\nimport { createAnimatedCall as call } from \"./AnimatedCall\";\nimport AnimatedNode from \"./AnimatedNode\";\nvar AnimatedDebug = function (_AnimatedNode) {\n  function AnimatedDebug(message, value) {\n    var _this;\n    _classCallCheck(this, AnimatedDebug);\n    invariant(typeof message === 'string', \"Reanimated: Animated.debug node first argument should be of type string but got \" + message);\n    invariant(value instanceof AnimatedNode, \"Reanimated: Animated.debug node second argument should be of type AnimatedNode but got \" + value);\n    _this = _callSuper(this, AnimatedDebug, [{\n      type: 'debug',\n      message: message,\n      value: value\n    }, [value]]);\n    _this._message = message;\n    _this._value = value;\n    return _this;\n  }\n  _inherits(AnimatedDebug, _AnimatedNode);\n  return _createClass(AnimatedDebug, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedDebug, id: \" + this.__nodeID;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      var value = val(this._value);\n      console.log(this._message, value);\n      return value;\n    }\n  }]);\n}(AnimatedNode);\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    var _NativeModules$Native, _NativeModules$Native2, _NativeModules$Native3;\n    var runningInRemoteDebugger = typeof atob !== 'undefined';\n    var runningInExpoShell = ((_NativeModules$Native = NativeModules.NativeUnimoduleProxy) == null ? void 0 : (_NativeModules$Native2 = _NativeModules$Native.modulesConstants) == null ? void 0 : (_NativeModules$Native3 = _NativeModules$Native2.ExponentConstants) == null ? void 0 : _NativeModules$Native3.executionEnvironment) === 'storeClient';\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      return block([call([value], function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n          a = _ref2[0];\n        return console.log(message + \" \" + a);\n      }), value]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n  return value;\n}","map":{"version":3,"names":["invariant","NativeModules","val","adapt","createAnimatedBlock","block","createAnimatedCall","call","AnimatedNode","AnimatedDebug","_AnimatedNode","message","value","_this","_classCallCheck","_callSuper","type","_message","_value","_inherits","_createClass","key","toString","__nodeID","__onEvaluate","console","log","createAnimatedDebug","__DEV__","_NativeModules$Native","_NativeModules$Native2","_NativeModules$Native3","runningInRemoteDebugger","atob","runningInExpoShell","NativeUnimoduleProxy","modulesConstants","ExponentConstants","executionEnvironment","_ref","_ref2","_slicedToArray","a"],"sources":["/Users/fergiewergie/Desktop/snap_track/mobile/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedDebug.js"],"sourcesContent":["import invariant from 'invariant';\nimport { NativeModules } from 'react-native';\nimport { val } from '../val';\nimport { adapt, createAnimatedBlock as block } from './AnimatedBlock';\nimport { createAnimatedCall as call } from './AnimatedCall';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedDebug extends AnimatedNode {\n  _message;\n  _value;\n\n  constructor(message, value) {\n    invariant(\n      typeof message === 'string',\n      `Reanimated: Animated.debug node first argument should be of type string but got ${message}`\n    );\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Animated.debug node second argument should be of type AnimatedNode but got ${value}`\n    );\n    super({ type: 'debug', message, value }, [value]);\n    this._message = message;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedDebug, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const value = val(this._value);\n    console.log(this._message, value);\n    return value;\n  }\n}\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    // hack to detect if app is running in remote debugger\n    // https://stackoverflow.com/questions/39022216\n    const runningInRemoteDebugger = typeof atob !== 'undefined';\n\n    // read the executionEnvironment off of expo-constants without explicitly\n    // depending on the package\n    const runningInExpoShell =\n      NativeModules.NativeUnimoduleProxy?.modulesConstants?.ExponentConstants\n        ?.executionEnvironment === 'storeClient';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      // When running in expo or remote debugger we use JS console.log to output variables\n      // otherwise we output to the native console using native debug node\n      return block([\n        call([value], ([a]) => console.log(`${message} ${a}`)),\n        value,\n      ]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n  // Debugging is disabled in PROD\n  return value;\n}\n"],"mappings":";;;;;;;;AAAA,OAAOA,SAAS,MAAM,WAAW;AAAC,OAAAC,aAAA;AAElC,SAASC,GAAG;AACZ,SAASC,KAAK,EAAEC,mBAAmB,IAAIC,KAAK;AAC5C,SAASC,kBAAkB,IAAIC,IAAI;AACnC,OAAOC,YAAY;AAAuB,IAEpCC,aAAa,aAAAC,aAAA;EAIjB,SAAAD,cAAYE,OAAO,EAAEC,KAAK,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAL,aAAA;IAC1BT,SAAS,CACP,OAAOW,OAAO,KAAK,QAAQ,uFACwDA,OACrF,CAAC;IACDX,SAAS,CACPY,KAAK,YAAYJ,YAAY,8FAC6DI,KAC5F,CAAC;IACDC,KAAA,GAAAE,UAAA,OAAAN,aAAA,GAAM;MAAEO,IAAI,EAAE,OAAO;MAAEL,OAAO,EAAPA,OAAO;MAAEC,KAAK,EAALA;IAAM,CAAC,EAAE,CAACA,KAAK,CAAC;IAChDC,KAAA,CAAKI,QAAQ,GAAGN,OAAO;IACvBE,KAAA,CAAKK,MAAM,GAAGN,KAAK;IAAC,OAAAC,KAAA;EACtB;EAACM,SAAA,CAAAV,aAAA,EAAAC,aAAA;EAAA,OAAAU,YAAA,CAAAX,aAAA;IAAAY,GAAA;IAAAT,KAAA,EAED,SAAAU,QAAQA,CAAA,EAAG;MACT,+BAA6B,IAAI,CAACC,QAAQ;IAC5C;EAAC;IAAAF,GAAA;IAAAT,KAAA,EAED,SAAAY,YAAYA,CAAA,EAAG;MACb,IAAMZ,KAAK,GAAGV,GAAG,CAAC,IAAI,CAACgB,MAAM,CAAC;MAC9BO,OAAO,CAACC,GAAG,CAAC,IAAI,CAACT,QAAQ,EAAEL,KAAK,CAAC;MACjC,OAAOA,KAAK;IACd;EAAC;AAAA,EA1ByBJ,YAAY;AA6BxC,OAAO,SAASmB,mBAAmBA,CAAChB,OAAO,EAAEC,KAAK,EAAE;EAClD,IAAIgB,OAAO,EAAE;IAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;IAGX,IAAMC,uBAAuB,GAAG,OAAOC,IAAI,KAAK,WAAW;IAI3D,IAAMC,kBAAkB,GACtB,EAAAL,qBAAA,GAAA5B,aAAa,CAACkC,oBAAoB,sBAAAL,sBAAA,GAAlCD,qBAAA,CAAoCO,gBAAgB,sBAAAL,sBAAA,GAApDD,sBAAA,CAAsDO,iBAAiB,qBAAvEN,sBAAA,CACIO,oBAAoB,MAAK,aAAa;IAE5C,IAAIN,uBAAuB,IAAIE,kBAAkB,EAAE;MAGjD,OAAO7B,KAAK,CAAC,CACXE,IAAI,CAAC,CAACK,KAAK,CAAC,EAAE,UAAA2B,IAAA;QAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,IAAA;UAAEG,CAAC,GAAAF,KAAA;QAAA,OAAMf,OAAO,CAACC,GAAG,CAAIf,OAAO,SAAI+B,CAAG,CAAC;MAAA,EAAC,EACtD9B,KAAK,CACN,CAAC;IACJ,CAAC,MAAM;MACL,OAAO,IAAIH,aAAa,CAACE,OAAO,EAAER,KAAK,CAACS,KAAK,CAAC,CAAC;IACjD;EACF;EAEA,OAAOA,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}